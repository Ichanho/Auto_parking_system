#include <IRremote.h>

//
// 자동자 진행 방향 정의
//
#define CAR_DIR_FW   0   // 전진.
#define CAR_DIR_BK   1   // 후진.
#define CAR_DIR_LF   2   // 좌회전.
#define CAR_DIR_RF   3   // 우회전
#define CAR_DIR_ST   4   // 정지.

// 
// 차량 운행 방향 상태 전역 변수.
int g_carDirection = CAR_DIR_ST; // 
int g_carSpeed = 220; // 최대 속도의  50 % for testing.

 
// 리모트 컨트롤러 관련 전역 변수.
const int irReceiverPin = A3;
IRrecv irrecv(irReceiverPin); //create an IRrecv object
decode_results decodedSignal; //stores results from IR sensor


void init_IRreceiverModule()
{
   pinMode(irReceiverPin, INPUT); // 
   irrecv.enableIRIn(); // Start the receiver object
}

struct IRvalueData
{
   String name;
   unsigned long value; // 
};

IRvalueData irData[21]=
{
   { "0", 0xFF6897 },
   { "1", 0xFF30CF },
   { "2", 0xFF18E7 },
   { "3", 0xFF7A85 },
   { "4", 0xFF10EF },
   { "5", 0xFF38C7 },
   { "6", 0xFF5AA5 },
   { "7", 0xFF42BD },
   { "8", 0xFF4AB5 },
   { "9", 0xFF52AD },
   { "100+", 0xFF9867 },
   { "200+", 0xFFB04F },
   { "-", 0xFFE01F },
   { "+", 0xFFA857 },
   { "EQ", 0xFF906F },
   { "<<", 0xFF22DD },
   { ">>", 0xFF02FD },
   { ">|", 0xFFC23D },
   { "CH-", 0xFFA25D },
   { "CH", 0xFF629D },
   { "CH+", 0xFFE21D }
};


// Dumps out the decode_results structure.
// Call this after IRrecv::decode()
// void * to work around compiler issue
//void dump(void *v) {
//  decode_results *results = (decode_results *)v

void dump(decode_results *results) {
   int count = results->rawlen;
   if (results->decode_type == UNKNOWN) {
      Serial.print("Unknown encoding: ");
   }
   else if (results->decode_type == NEC) {
      Serial.print("Decoded NEC: ");
   }
   Serial.print(results->value, HEX);
   Serial.print(" (");
   Serial.print(results->bits, DEC);
   Serial.println(" bits)");
   
   Serial.println("");
}


//
String decode_IRvalue(unsigned long irValue)
{
   for (int i = 0; i < 21;i++)
   {
      if (irData[i].value==irValue)
      { 
         return irData[i].name;
      }
   }
   Serial.println("Not Defined.");
   return String("key Value None");
}

void controllerByIRCommand(String& szIRCmd)
{

   if (szIRCmd == "2") // 전진
   {
      g_carDirection = CAR_DIR_FW;
      Serial.println("Forward");
   }
   else
   if (szIRCmd == "5")
   {
      g_carDirection = CAR_DIR_ST;
      Serial.println("Stop");
   }
   else
   if (szIRCmd == "8")
   {
      g_carDirection = CAR_DIR_BK;
      Serial.println("Backward");
   }
   else
   if (szIRCmd == "4")
   {
      g_carDirection = CAR_DIR_LF;
      Serial.println("Left");
   }
   else
   if (szIRCmd == "6")
   {
      g_carDirection = CAR_DIR_RF;
      Serial.println("Right");
   }
}


//
// IR 수신값 처리.
//
void update_IRreceiverModule()
{
   // IR 수신값이 있는지 판단.
   if (irrecv.decode(&decodedSignal) == true)
   {
      if (decodedSignal.bits > 0) // bit > 0 일 경우에만 수신값 체크.
      {
         Serial.println(decodedSignal.value);
         //dump(&decodedSignal);
         String szRecvCmd=decode_IRvalue(decodedSignal.value);
         controllerByIRCommand(szRecvCmd);
      }
      irrecv.resume(); // watch out for another message
   }
}



// 부팅 후 1회 실행되는 함수. 초기화 함수. Setup()
void setup()
{
   //
   Serial.begin(9600);
   //
   init_IRreceiverModule();
   
}

// 계속 실행되는 함수. Loop()
void loop()
{
  
   update_IRreceiverModule();
}